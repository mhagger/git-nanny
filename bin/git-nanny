#! /usr/bin/python

"""Configurable Git pre-commit checks."""

usage = """\
usage: %prog check-format [OPTIONS]
       %prog pre-commit [OPTIONS]

Type '%prog CMD --help' for more information.
"""

import sys
import os
import subprocess
import optparse

sys.path.insert(
    0,
    os.path.join(
        os.path.dirname(os.path.dirname(os.path.realpath(os.path.abspath(sys.argv[0])))),
        'lib',
        )
    )

import format_checks


class Error(Exception):
    pass


def add_common_options(parser):
    parser.add_option(
        '--verbose', '-v', action='store_true', default=False,
        help='Increase amount of informational output.',
        )

    parser.add_option(
        '--debug', '-d', action='store_true', default=False,
        help='Print a lot of informational output.',
        )


def process_common_options(options):
    if options.debug:
        options.verbose = options.debug

    if options.debug:
        print options


def check_format(args):
    parser = optparse.OptionParser(
        prog='git nanny check-format',
        description='Check that files have the correct format.',
        usage='%prog [OPTIONS] [--cached | COMMITTISH] [--all | [-- [FILENAME...]]]',
        )

    parser.add_option(
        '--cached', action='store_true', default=False,
        help='Check files from the index.',
        )

    parser.add_option(
        '--all', action='store_true', default=False,
        help='Check all files known to git.',
        )

    parser.add_option(
        '--verbose', '-v', action='store_true', default=False,
        help='Increase amount of informational output.',
        )

    parser.add_option(
        '--debug', '-d', action='store_true', default=False,
        help='Print a lot of informational output.',
        )

    try:
        sep = args.index('--')
    except ValueError:
        filenames = None
    else:
        filenames = args[sep + 1:] or None
        del args[sep:]

    (options, args) = parser.parse_args(args)
    process_common_options(options)

    if options.all:
        if filenames:
            parser.error('Filenames may not be specified together with --all')
        cmd = ['git', 'ls-files', '-z']
        p = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE, stderr=subprocess.PIPE,
            )
        (out, err) = p.communicate()
        retcode = p.wait()
        if retcode or err:
            sys.exit('Command failed: %s' % (' '.join(cmd),))
        filenames = [
            filename
            for filename in out.split('\0')
            if filename
            ]

    if options.cached:
        if args:
            parser.error('A revision may not be specified together with --cached')
        commit = format_checks.GitIndex(filenames)
    elif not args:
        commit = format_checks.GitWorkingTree(filenames)
    elif len(args) == 1:
        [committish] = args
        cmd = ['git', 'rev-parse', '--verify', committish]
        p = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE, stderr=subprocess.PIPE,
            )
        (out, err) = p.communicate()
        retcode = p.wait()
        if retcode or err:
            sys.exit('Command failed: %s' % (' '.join(cmd),))
        sha1 = out.strip()
        commit = format_checks.GitCommit(sha1, filenames)
    else:
        parser.error('Require 0 or 1 argument')

    if not format_checks.check_commit(commit):
        sys.exit(1)


FAILURE_MESSAGE = """\

Your commit has been rejected because of the problems listed above.
Please fix the errors and try again.
"""

def pre_commit(args):
    parser = optparse.OptionParser(
        prog='git nanny pre-commit',
        description='Run pre-commit checks.',
        usage='%prog [OPTIONS]',
        )

    parser.add_option(
        '--verbose', '-v', action='store_true', default=False,
        help='Increase amount of informational output.',
        )

    parser.add_option(
        '--debug', '-d', action='store_true', default=False,
        help='Print a lot of informational output.',
        )

    (options, args) = parser.parse_args(args)
    process_common_options(options)

    if args:
        parser.error('Unexpected arguments: %s' % (' '.join(args),))

    commit = format_checks.GitIndex()

    if not format_checks.check_commit(commit):
        raise Error(FAILURE_MESSAGE)


subcommands = {
    'check-format' : check_format,
    'pre-commit' : pre_commit,
    }


def main(args):
    while args:
        arg = args.pop(0)
        subcommand = subcommands.get(arg)
        if subcommand is not None:
            try:
                subcommand(args)
            except Exception, e:
                sys.exit(str(e))
            sys.exit(0)
        elif arg in ['help', '--help', '-h']:
            # Please note that --help doesn't work if invoked via "git
            # nanny --help".
            sys.stderr.write(usage.replace('%prog', 'git nanny'))
            sys.exit(0)
        else:
            sys.exit('Unrecognized subcommand: %r' % (arg,))

    sys.exit('Please specify a subcommand!\n%s' % (usage.replace('%prog', 'git nanny'),))


main(sys.argv[1:])

