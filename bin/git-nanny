#! /usr/bin/python

"""Configurable Git pre-commit checks."""

usage = """\
usage: %prog check-format [OPTIONS]
       %prog pre-commit [OPTIONS] # For use as hook
       %prog prepare-commit-msg [OPTIONS] # For use as hook
       %prog commit-msg [OPTIONS] # For use as hook
       %prog pre-receive [OPTIONS] # For server-side use

Type '%prog CMD --help' for more information.
"""

import sys
import os
import subprocess
import optparse

sys.path.insert(
    0,
    os.path.join(
        os.path.dirname(os.path.dirname(os.path.realpath(os.path.abspath(sys.argv[0])))),
        'lib',
        )
    )

import format_checks
from format_checks import ATATAT_CHECK
from format_checks import MARKER_STRING
from format_checks import PRE_COMMIT_CHECKS
from format_checks import PRE_RECEIVE_CHECKS


ZEROS = '0' * 40


class Error(Exception):
    pass


def add_common_options(parser):
    parser.add_option(
        '--verbose', '-v', action='store_true', default=False,
        help='Increase amount of informational output.',
        )

    parser.add_option(
        '--debug', '-d', action='store_true', default=False,
        help='Print a lot of informational output.',
        )


def process_common_options(options):
    if options.debug:
        options.verbose = options.debug

    if options.debug:
        print options


def check_format(args):
    parser = optparse.OptionParser(
        prog='git nanny check-format',
        description='Check that files have the correct format.',
        usage='%prog [OPTIONS] [--cached | COMMITTISH] [--all | [-- [FILENAME...]]]',
        )

    parser.add_option(
        '--cached', action='store_true', default=False,
        help='Check files from the index.',
        )

    parser.add_option(
        '--all', action='store_true', default=False,
        help='Check all files known to git.',
        )

    parser.add_option(
        '--verbose', '-v', action='store_true', default=False,
        help='Increase amount of informational output.',
        )

    parser.add_option(
        '--debug', '-d', action='store_true', default=False,
        help='Print a lot of informational output.',
        )

    try:
        sep = args.index('--')
    except ValueError:
        filenames = None
    else:
        filenames = args[sep + 1:] or None
        del args[sep:]

    (options, args) = parser.parse_args(args)
    process_common_options(options)

    if options.all:
        if filenames:
            parser.error('Filenames may not be specified together with --all')
        cmd = ['git', 'ls-files', '-z']
        p = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE, stderr=subprocess.PIPE,
            )
        (out, err) = p.communicate()
        retcode = p.wait()
        if retcode or err:
            sys.exit('Command failed: %s' % (' '.join(cmd),))
        filenames = [
            filename
            for filename in out.split('\0')
            if filename
            ]

    if options.cached:
        if args:
            parser.error('A revision may not be specified together with --cached')
        commit = format_checks.GitIndex(filenames)
    elif not args:
        commit = format_checks.GitWorkingTree(filenames)
    elif len(args) == 1:
        [committish] = args
        cmd = ['git', 'rev-parse', '--verify', committish]
        p = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE, stderr=subprocess.PIPE,
            )
        (out, err) = p.communicate()
        retcode = p.wait()
        if retcode or err:
            sys.exit('Command failed: %s' % (' '.join(cmd),))
        sha1 = out.strip()
        commit = format_checks.GitCommit(sha1, filenames)
    else:
        parser.error('Require 0 or 1 argument')

    if not PRE_RECEIVE_CHECKS(commit):
        sys.exit(1)


PRE_COMMIT_FAILURE_MESSAGE = """\

Your commit has been rejected because of the problems listed above.
Please fix the errors and try again.
"""


def pre_commit(args):
    parser = optparse.OptionParser(
        prog='git nanny pre-commit',
        description='Run pre-commit checks.',
        usage='%prog [OPTIONS]',
        )

    parser.add_option(
        '--verbose', '-v', action='store_true', default=False,
        help='Increase amount of informational output.',
        )

    parser.add_option(
        '--debug', '-d', action='store_true', default=False,
        help='Print a lot of informational output.',
        )

    (options, args) = parser.parse_args(args)
    process_common_options(options)

    if args:
        parser.error('Unexpected arguments: %s' % (' '.join(args),))

    commit = format_checks.GitIndex()

    if not PRE_COMMIT_CHECKS(commit):
        raise Error(PRE_COMMIT_FAILURE_MESSAGE)


def strip_comments(msg):
    return ''.join(
        line
        for line in msg.splitlines(True)
        if not line.startswith('#')
        )


ATATAT_WARNING = """\
# This commit adds the marker string ('%(MARKER_STRING)s') to one or more files!
# If you leave the marker string in this commit message (as on the top
# line above), the commit will be accepted as a local commit, but it
# cannot be pushed to the central git repository.

""" % dict(MARKER_STRING=MARKER_STRING)


PREPARE_COMMIT_MSG_FAILURE_MESSAGE = """\

Your commit has been rejected because it adds '%(MARKER_STRING)s' to one or more files.
If you would like to commit anyway, then you must mark the commit as
'local' by including '%(MARKER_STRING)s' in your commit message.  (But remember,
such commits cannot be pushed to the central git repository.)
""" % dict(MARKER_STRING=MARKER_STRING)


def prepare_commit_msg(args):
    parser = optparse.OptionParser(
        prog='git nanny prepare-commit-msg',
        description='Tweak commit message if any files contain %s.' % (MARKER_STRING,),
        usage='%prog [OPTIONS]',
        )

    parser.add_option(
        '--verbose', '-v', action='store_true', default=False,
        help='Increase amount of informational output.',
        )

    parser.add_option(
        '--debug', '-d', action='store_true', default=False,
        help='Print a lot of informational output.',
        )

    (options, args) = parser.parse_args(args)
    process_common_options(options)

    if not args:
        parser.error('Expected filename argument')

    msg_filename = args.pop(0)

    commit = format_checks.GitIndex()

    # See if the draft commit message already contains the marker
    # string (this is a cheap test):
    msg = open(msg_filename).read()
    if MARKER_STRING in strip_comments(msg):
        return

    # See if any files contain a new MARKER_STRING:
    if ATATAT_CHECK(commit):
        return

    if os.environ.get('GIT_EDITOR') == ':':
        # The editor will not be opened, so the user doesn't have a
        # chance to add the marker string to the commit message:
        raise Error(PREPARE_COMMIT_MSG_FAILURE_MESSAGE)

    # Add a warning to the proposed commit message:
    f = open(msg_filename, 'w')
    f.write('%s ' % (MARKER_STRING,))
    wrote_warning = False
    for line in msg.splitlines(True):
        if not wrote_warning and line.startswith('#'):
            f.write(ATATAT_WARNING)
            wrote_warning = True
        f.write(line)
    f.close()


COMMIT_MSG_FAILURE_MESSAGE = """\

Your commit has been rejected because it adds '%(MARKER_STRING)s' to one or more files.
If you would like to commit anyway, then you must mark the commit as
'local' by including '%(MARKER_STRING)s' in your commit message.  (But remember,
such commits cannot be pushed to the central git repository.)
""" % dict(MARKER_STRING=MARKER_STRING)


def commit_msg(args):
    parser = optparse.OptionParser(
        prog='git nanny commit-msg',
        description=(
            'Hook script to check commit message if any files contain %s.'
            % (MARKER_STRING,)
            ),
        usage='%prog [OPTIONS]',
        )

    parser.add_option(
        '--verbose', '-v', action='store_true', default=False,
        help='Increase amount of informational output.',
        )

    parser.add_option(
        '--debug', '-d', action='store_true', default=False,
        help='Print a lot of informational output.',
        )

    (options, args) = parser.parse_args(args)
    process_common_options(options)

    if not args:
        parser.error('Expected filename argument')

    msg_filename = args.pop(0)
    commit = format_checks.GitIndex()

    # See if the draft commit message contains the marker string (this
    # is a cheap test):
    msg = open(msg_filename).read()
    if MARKER_STRING in strip_comments(msg):
        return

    # See if any files contain MARKER_STRING:
    if ATATAT_CHECK(commit):
        return

    raise Error(COMMIT_MSG_FAILURE_MESSAGE)


PRE_RECEIVE_FAILURE_MESSAGE = """\

The following commit has been rejected because of the problems listed
above:

    %s

Please fix the errors and try again.
"""


def pre_receive(args):
    parser = optparse.OptionParser(
        prog='git nanny pre-receive',
        description='Run (server-side) pre-receive checks.',
        usage='%prog [OPTIONS]',
        )

    parser.add_option(
        '--verbose', '-v', action='store_true', default=False,
        help='Increase amount of informational output.',
        )

    parser.add_option(
        '--debug', '-d', action='store_true', default=False,
        help='Print a lot of informational output.',
        )

    (options, args) = parser.parse_args(args)
    process_common_options(options)

    if args:
        parser.error('Unexpected arguments: %s' % (' '.join(args),))

    updates = []
    for line in sys.stdin:
        (oldrev, newrev, refname) = line.strip().split(' ', 2)
        if oldrev == ZEROS:
            oldrev = None
        if newrev == ZEROS:
            newrev = None
        updates.append((oldrev, newrev, refname))

    # Determine all of the commits that were added by the updates:
    cmd = ['git', 'log', '--format=%H %P']
    cmd += [
        ('%s' % newrev)
        for (oldrev, newrev, refname) in updates
        if newrev is not None
        ]
    cmd += ['--not', '--all']
    p = subprocess.Popen(
        cmd, stdout=subprocess.PIPE,
        )

    # A map {sha1 : (set(parents), set(children))}
    new_commits = {}
    for line in p.stdout:
        words = line.strip().split()
        new_commits[words[0]] = (set(words[1:]), set())

    retcode = p.wait()
    if retcode:
        sys.exit('Error running command: %s' % (' '.join(cmd),))

    # Tell the parents about their children and look for commits that
    # have no parents among the new commits:
    orphans = []
    for (sha1, (parents, children)) in new_commits.iteritems():
        for parent in list(parents):
            try:
                (grandparents, siblings) = new_commits[parent]
            except KeyError:
                # The parent must have been an old commit.
                parents.remove(parent)
            else:
                siblings.add(sha1)
        if not parents:
            # This commit's parents (if any) are all old commits:
            orphans.append(sha1)

    while orphans:
        sha1 = orphans.pop()
        (parents, children) = new_commits.pop(sha1)

        commit = format_checks.GitCommit(sha1)

        if not PRE_RECEIVE_CHECKS(commit):
            cmd = ['git', 'log', '-1', '--oneline', sha1]
            p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
            description = p.stdout.read().strip()
            retcode = p.wait()
            if retcode:
                sys.exit('Error running command: %s' % (' '.join(cmd),))
            raise Error(PRE_RECEIVE_FAILURE_MESSAGE % (description,))

        for parent in parents:
            (grandparents, siblings) = new_commits[parent]
            siblings.remove(sha1)
        for child in children:
            (siblings, grandchildren) = new_commits[child]
            siblings.remove(sha1)
            if not siblings:
                orphans.append(child)

    assert not new_commits


subcommands = {
    'check-format' : check_format,
    'pre-commit' : pre_commit,
    'prepare-commit-msg' : prepare_commit_msg,
    'commit-msg' : commit_msg,
    'pre-receive' : pre_receive,
    }


def main(args):
    while args:
        arg = args.pop(0)
        subcommand = subcommands.get(arg)
        if subcommand is not None:
            try:
                subcommand(args)
            except Error, e:
                sys.exit(str(e))
            sys.exit(0)
        elif arg in ['help', '--help', '-h']:
            # Please note that --help doesn't work if invoked via "git
            # nanny --help".
            sys.stderr.write(usage.replace('%prog', 'git nanny'))
            sys.exit(0)
        else:
            sys.exit('Unrecognized subcommand: %r' % (arg,))

    sys.exit('Please specify a subcommand!\n%s' % (usage.replace('%prog', 'git nanny'),))


main(sys.argv[1:])

